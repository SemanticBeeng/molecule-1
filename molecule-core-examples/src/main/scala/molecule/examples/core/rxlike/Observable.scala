/*
 * Copyright (C) 2013 Alcatel-Lucent.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 * Licensed to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package molecule.examples.core.rxlike

import molecule._

trait Observer[-A] {
  def onNext(a: A): Unit
  def onComplete(): Unit
  def onError(e: Exception): Unit
}

/**
 * Word-at-a-time Rx like API to create a channel...
 *
 * From Rx documentation:
 * Defines a provider for push-based notification.
 *
 *  See https://rx.codeplex.com/
 *
 * Use of the Observer pattern is strongly discouraged because it does not permit to
 * maintain state without resorting to mutable variables and because it might block
 * threads in case it does side-effects. Prefer one of the IChan generators [[see molecule.channel.IChan]],
 * a result channel [[see molecule.channel.RIChan]],
 * or a BlockingIChan [[see molecule.channel.BlockingIChan]] if side-effects are required.
 */
object Observable {
  import channel.IChan

  private[this] final class MutableObserver[A](next: => IChan[A]) extends Observer[A] {
    var aOpt: Option[A] = None
    var cOpt: Option[Either[Exception, Unit]] = None

    def onNext(a: A) { aOpt = Some(a) }
    def onComplete() { cOpt = Some(Right(())) }
    def onError(e: Exception) { cOpt = Some(Left((e))) }

    def continue(k: (Seg[A], IChan[A]) => Unit): Unit = {
      val tail = cOpt match {
        case Some(c) =>
          val signal = c.fold(Signal(_), _ => EOS)
          IChan.empty(signal)
        case None =>
          next
      }

      aOpt match {
        case Some(a) => k(Seg(a), tail)
        case None => k(Seg(), tail)
      }
    }
  }

  /**
   * Create an input channel whose messages are generated by repeatedly
   * invoking the observer function passed as argument upon each read.
   *
   * Note: avoid observer pattern. Instead, use `IChan` generators (e.g. `from(2)`), RIChan
   * generators (e.g. `async`) or, if you really need blocking I/O, a `sys.GetChan`.")
   *
   * @tparam A the type of messages produced by the observer
   * @return An input channel interface carrying messages produced by the observer
   */
  def create[A](f: Observer[A] => Unit): IChan[A] = new IChan[A] {

    @volatile private[this] var signal: Signal = null

    def read(k: (Seg[A], IChan[A]) => Unit): Unit = {
      if (signal == null) {
        val o = new MutableObserver[A](create(f))
        f(o)
        o.continue(k)
      } else k(Seg(), IChan.empty(signal))
    }

    def poison(signal: Signal): Unit = this.signal = signal
  }

}